{
	"info": {
		"_postman_id": "c8b7fc95-dfb3-4000-a783-46f7e16e7d4f",
		"name": "Day 25: Dynamic request bodies",
		"description": "## Instructions for Day 25: Dynamic request bodies\n\n1.  **Get the challenge:** Fork [the parent collection `Day 25: Dynamic request bodies`](https://www.postman.com/postman/workspace/30-days-of-postman-for-developers/documentation/1559645-2f480c99-4608-4210-b3c5-5a75c7e7a384) from the main workspace to your own public workspace.\n2.  **Read the documentation:** In your fork, select the first folder. Expand the context bar on the right to follow the instructions in the collection documentation.\n3.  **Submit your solution:** Select the second folder `Submit your solution` and follow the instructions in the documentation to validate your solution.\n    \n\n## Concepts covered\n\n*   [Variables](https://learning.postman.com/docs/sending-requests/variables/)\n*   [Scripts](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/)\n*   [Using dynamic variables](https://learning.postman.com/docs/writing-scripts/script-references/variables-list/)\n*   [Sending asynchronous requests](https://learning.postman.com/docs/writing-scripts/script-references/postman-sandbox-api-reference/#sending-requests-from-scripts)\n*   [Writing tests](https://learning.postman.com/docs/writing-scripts/test-scripts/)\n    \n\n## Additional resources\n\n*   [Example](https://www.postman.com/postman/workspace/postman-answers/collection/9215231-b9133e48-73c3-4aa4-b189-e038ee4c5e00?ctx=documentation) in Postman Answers workspace\n*   [Dynamic requests](https://www.tiktok.com/@joycejetson/video/7075325324929666346) tiktok\n    \n\n## Next challenge\n\n*   [Parse HTML response](https://www.postman.com/postman/workspace/30-days-of-postman-for-developers/documentation/1559645-9f9419fe-5249-4b44-b07f-4cb3ef913c81)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25858264",
		"_collection_link": "https://www.postman.com/cloudy-zodiac-144738/workspace/30-days-of-postman-for-developers/collection/25858264-c8b7fc95-dfb3-4000-a783-46f7e16e7d4f?action=share&creator=25858264&source=collection_link"
	},
	"item": [
		{
			"name": "Dynamic request bodies",
			"item": [
				{
					"name": "color",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const colorHex = pm.variables.replaceIn('{{$randomHexColor}}');\r",
									"\r",
									"pm.sendRequest({\r",
									"\turl: `https://www.thecolorapi.com/id?hex=${colorHex.slice(1)}`, //Utilizamos o método .slice() para remover o caractere \"#\" do início do código hexadecimal. Isso é necessário porque a API The Color API espera receber apenas o valor hexadecimal sem o caractere \"#\".\r",
									"\tmethod: 'GET',\r",
									"\theader: 'Accept:application/json',\r",
									"\tbody: {},\r",
									"}, function(err, res) {\r",
									"\tconst responseJson = res.json();\r",
									"\tconst colorRgb = responseJson.rgb.value;\r",
									"\tconst colorName = responseJson.name.value;\r",
									"\r",
									"    const payload = {\r",
									"        hex: colorHex,\r",
									"        rgb: colorRgb,\r",
									"        name: colorName\r",
									"    };\r",
									"    pm.collectionVariables.set(\"payload\", JSON.stringify(payload));\r",
									"});\r",
									"\r",
									"/*\r",
									"const colorHex = pm.variables.replaceIn('{{$randomHexColor}}');\r",
									"Aqui, estamos usando a função pm.variables.replaceIn() para substituir a variável {{$randomHexColor}} pelo seu valor correspondente.\r",
									"O valor substituído é atribuído à variável colorHex, que conterá um código hexadecimal aleatório, por exemplo, #FF0000.\r",
									"\r",
									"pm.sendRequest({ ... }, function(err, res) { ... });\r",
									"Essa é a função principal que envia a solicitação HTTP para a API The Color API.\r",
									"A função pm.sendRequest() recebe dois argumentos: um objeto com as configurações da solicitação e uma função de retorno de chamada que será executada quando a resposta for recebida.\r",
									"\r",
									"url: https://www.thecolorapi.com/id?hex=${colorHex.slice(1)}`,`\r",
									"Aqui, estamos definindo a URL da solicitação GET para a API The Color API.\r",
									"O valor do código hexadecimal (colorHex) é inserido dinamicamente na URL usando uma string template.\r",
									"Utilizamos o método .slice(1) para remover o caractere \"#\" do início do código hexadecimal, pois a API espera receber apenas o valor hexadecimal sem o caractere \"#\".\r",
									"\r",
									"method: 'GET',\r",
									"Especificamos que a solicitação é do tipo GET.\r",
									"\r",
									"header: 'Accept:application/json',\r",
									"Definimos o cabeçalho da solicitação para indicar que aceitamos uma resposta no formato JSON.\r",
									"\r",
									"body: {},\r",
									"Não enviamos um corpo (payload) na solicitação GET, portanto, um objeto vazio é passado como corpo.\r",
									"\r",
									"function(err, res) { ... }\r",
									"Esta é a função de retorno de chamada que será executada quando a resposta for recebida ou ocorrer um erro durante a solicitação.\r",
									"Os argumentos err e res contêm informações sobre o erro (se houver) e a resposta da solicitação, respectivamente.\r",
									"\r",
									"const responseJson = res.json();\r",
									"Aqui, estamos convertendo a resposta recebida em formato JSON para um objeto JavaScript.\r",
									"A função res.json() analisa o conteúdo da resposta como JSON e retorna um objeto JavaScript correspondente.\r",
									"\r",
									"const colorRgb = responseJson.rgb.value;\r",
									"Estamos extraindo o valor do atributo value da propriedade rgb do objeto responseJson.\r",
									"Isso nos dará o valor RGB da cor retornada pela API.\r",
									"\r",
									"const colorName = responseJson.name.value;\r",
									"Da mesma forma, estamos extraindo o valor do atributo value da propriedade name do objeto responseJson.\r",
									"Isso nos dará o nome da cor retornado pela API.\r",
									"\r",
									"const payload = { hex: colorHex, rgb: colorRgb, name: colorName };\r",
									"Criamos um objeto chamado payload que contém as propriedades hex, rgb e name.\r",
									"hex armazena o código hexadecimal original (colorHex).\r",
									"rgb armazena o valor RGB extraído da resposta da API (colorRgb).\r",
									"name armazena o nome da cor extraído daresposta da API (colorName).\r",
									"\r",
									"pm.collectionVariables.set(\"payload\", JSON.stringify(payload));\r",
									"Por fim, usamos a função pm.collectionVariables.set() para definir uma variável de coleção chamada \"payload\" e atribuir a ela uma representação em formato JSON do objeto payload.\r",
									"Isso permite que você acesse o objeto payload em outras partes do seu ambiente do Postman, usando a variável de coleção \"payload\".\r",
									"\r",
									"explicações geradas com auxilio do chatgpt\r",
									"*/"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate all fields\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    const requestPayloadObj = JSON.parse(pm.collectionVariables.get(\"payload\"));\r",
									"    \r",
									"    pm.expect(responseJson.data.hex).to.eql(requestPayloadObj.hex);\r",
									"    pm.expect(responseJson.data.rgb).to.eql(requestPayloadObj.rgb);\r",
									"    pm.expect(responseJson.data.name).to.eql(requestPayloadObj.name);\r",
									"});\r",
									"\r",
									"/*\r",
									"pm.test(\"Validate all fields\", function () { ... });\r",
									"Este teste valida todos os campos da resposta em relação ao objeto payload armazenado na variável de coleção.\r",
									"\r",
									"const responseJson = pm.response.json();\r",
									"converte a resposta em formato JSON para um objeto JavaScript.\r",
									"\r",
									"const requestPayloadObj = JSON.parse(pm.collectionVariables.get(\"payload\"));\r",
									"obtém o objeto payload armazenado na variável de coleção e converte-o de volta para um objeto JavaScript.\r",
									"\r",
									"pm.expect(responseJson.data.hex).to.eql(requestPayloadObj.hex);\r",
									"compara o valor do campo hex da resposta (responseJson.data.hex) com o valor do campo hex do objeto payload (requestPayloadObj.hex).\r",
									"\r",
									"pm.expect(responseJson.data.rgb).to.eql(requestPayloadObj.rgb);\r",
									"compara o valor do campo rgb da resposta com o valor do campo rgb do objeto payload.\r",
									"\r",
									"pm.expect(responseJson.data.name).to.eql(requestPayloadObj.name);\r",
									"compara o valor do campo name da resposta com o valor do campo name do objeto payload.\r",
									"\r",
									"Cada uma das comparações usa pm.expect() para definir a expectativa e .to.eql() para verificar se os valores são iguais.\r",
									"\r",
									"explicações geradas com auxilio do chatgpt\r",
									"*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{payload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://postman-echo.com/post",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"post"
							]
						}
					},
					"response": []
				}
			],
			"description": "It's time to work on your next challenge.\n\n1. **Add a request**: Add a request called `color` to the folder `Dynamic request bodies` with the following details:\n  - `POST` request method\n  - `https://postman-echo.com/post` request URL\n  - <code>\\{{payload\\}}</code> request body formatted as raw JSON\n1. **Dynamically set the payload**: Under the **Pre-request Script** tab, set a variable (any type you prefer) called `payload` to send in the request body. The payload should consist of the following parts:\n  - Dynamically generate a random hex code using [the faker library](https://learning.postman.com/docs/writing-scripts/script-references/variables-list/)\n  - Use [`pm.sendRequest()`](https://learning.postman.com/docs/writing-scripts/script-references/postman-sandbox-api-reference/#sending-requests-from-scripts) to make a `GET` request to [The Color API](https://www.thecolorapi.com/docs#colors-color-identification-get)'s endpoint to get the random hex code's rgb value and name. \n\n  Construct the entire payload in the pre-request script so that the variable `payload` can be sent as <code>\\{{payload\\}}</code> in the **Body** tab. The payload should look like this:\n```\n{\n    hex: \"#170d58\",\n    rgb: \"rgb(23, 13, 88)\",\n    name: \"Violent Violet\"\n}\n```\n\n  Make sure the payload is sending as you expect it to. Sending the request again should change the payload dynamically. Remember you can check the Postman console to debug unexpected behavior.\n1. **Add two tests**: Write a test to ensure a successful response status code. Then write another test to validate at least one property in your response body. Send the request to make sure the tests pass, and save your changes. \n\nOnce you complete these steps, move on to the next folder in this collection to submit your solution. Follow the instructions in the request documentation.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Submit your solution",
			"item": [
				{
					"name": "submit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// counter for passed tests\r",
									"let pass = 0\r",
									"let totalToPass = 5\r",
									"\r",
									"let collection = pm.response.json().collection\r",
									"\r",
									"pm.test(\"If you have any failures, review the failed test results or ask for support in the community forum. Remember to save your changes if you update the collection. When all of your tests pass, you are done with today's challenge.\", () => {\r",
									"    pm.expect(true);\r",
									"    pass += 1\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"    pass += 1\r",
									"});\r",
									"\r",
									"pm.test(\"Correct collection returned\", () => {\r",
									"    pm.expect(collection.info.name).equals(\"Day 25: Dynamic request bodies\")\r",
									"    pass += 1\r",
									"})\r",
									"\r",
									"pm.test(\"Request added correctly\", () => {\r",
									"    pm.expect(collection.item[0].item.length, 'check number of requests').equals(1)\r",
									"\r",
									"    let colorRequest = collection.item[0].item.find(req => { return req.name === \"color\"})\r",
									"    pm.expect(colorRequest.name, 'check name').equals(\"color\")\r",
									"    pm.expect(colorRequest.request.method, 'check method').equals(\"POST\")\r",
									"    pm.expect(colorRequest.request.url.raw, 'check url').equals(\"https://postman-echo.com/post\")\r",
									"\r",
									"    pass += 1\r",
									"})\r",
									"\r",
									"pm.test(\"Scripts added correctly\", () => {\r",
									"    let colorRequest = collection.item[0].item.find(req => { return req.name === \"color\"})\r",
									"\r",
									"    let prerequest = colorRequest.event.find(event => {return event.listen === \"prerequest\"})\r",
									"    pm.expect(prerequest.listen, 'check pre script').equals(\"prerequest\")\r",
									"    pm.expect(prerequest.script.exec.toString(), 'check prerequest syntax dynamic variable').to.include(\"pm.variables.replaceIn\")\r",
									"    pm.expect(prerequest.script.exec.toString(), 'check prerequest syntax async request').to.include(\"pm.sendRequest\")\r",
									"    pm.expect(prerequest.script.exec.toString(), 'check prerequest syntax color api').to.include(\"thecolorapi\")\r",
									"\r",
									"    let test = colorRequest.event.find(event => {return event.listen === \"test\"})\r",
									"    pm.expect(test.listen, 'check test script').equals(\"test\")\r",
									"    pm.expect(test.script.exec.toString(), 'check test syntax').to.include(\"pm.test\")\r",
									"\r",
									"    pass += 1\r",
									"})\r",
									"\r",
									"// visualization for test results\r",
									"let template\r",
									"if (pass == totalToPass) {\r",
									"    template = `🍪 passing!\r",
									"        <br />\r",
									"        <img src=\"https://media1.giphy.com/media/fvwOxjwlzR7yUuC88c/giphy.gif?cid=ecf05e478iktcsr71s4uqco76mufu8rvoilppai8xojjtz91&rid=giphy.gif&ct=g\" />\r",
									"    `\r",
									"} else {\r",
									"    template = `🙅 please try again\r",
									"        <br />\r",
									"        <img src=\"https://media4.giphy.com/media/L7Nnb9j5NU48g/giphy.gif?cid=ecf05e47xfgazqs3ff52onkuslwvju2nuqlsjy3z3u9c7t2x&rid=giphy.gif&ct=g\" />\r",
									"    `\r",
									"}\r",
									"pm.visualizer.set(template)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{postman_api_key}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://api.getpostman.com/collections/{{collectionUid}}",
							"protocol": "https",
							"host": [
								"api",
								"getpostman",
								"com"
							],
							"path": [
								"collections",
								"{{collectionUid}}"
							]
						},
						"description": "It's time to submit your solution.\n\n1. **Use a Postman environment:** Find the `Postman API env` environment from the previous challenge. Update the `collectionUid` with the current collection's ID.\n1. **Validate your solution**: Save your changes in the collection and environment. Hit **Send** and look under the **Tests** tab of the server response at the bottom to review your test results.\n\nIf you have any failures, review the failed test results or ask for support in the [community forum](https://community.postman.com/). When all of your tests pass, you are done with today's challenge. Remember to save your changes as you'll need to pass all the challenges to claim a **30 days of Postman** badge."
					},
					"response": []
				}
			],
			"description": "Follow the instructions in the request documentation."
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "collectionUid",
			"value": "Your Day 25 Collection UID"
		},
		{
			"key": "payload",
			"value": ""
		}
	]
}